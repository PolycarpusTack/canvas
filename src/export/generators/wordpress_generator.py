"""
WordPress Generator

CLAUDE.md Implementation:
- #7.2: Secure WordPress theme generation with proper escaping
- #1.2: DRY template generation
- #9.1: Accessible WordPress themes
- #3.4: Modern WordPress patterns (blocks, REST API)
"""

import logging
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass, field
from pathlib import Path
import json
import re

from ..export_context import ExportContext
from ..export_config import ExportConfig
from .base_generator import BaseGenerator
from ...models.component_enhanced import Component

logger = logging.getLogger(__name__)


@dataclass
class WordPressTemplateInfo:
    """Information about a WordPress template"""
    component: Component
    name: str
    template_type: str  # 'page', 'post', 'archive', 'single', etc.
    hierarchy_level: int
    post_types: List[str] = field(default_factory=list)
    custom_fields: List[Dict[str, str]] = field(default_factory=list)
    has_blocks: bool = False
    is_dynamic: bool = False


class WordPressGenerator(BaseGenerator):
    """
    Generate WordPress theme with modern patterns
    
    CLAUDE.md Implementation:
    - #7.2: Secure WordPress theme generation with proper escaping
    - #1.2: DRY template generation
    - #9.1: Accessible WordPress themes
    """
    
    def __init__(self):
        super().__init__()
        self.template_registry: Dict[str, WordPressTemplateInfo] = {}
        self.block_patterns: Set[str] = set()
        self.custom_post_types: Set[str] = set()
        
    async def generate(self, context: ExportContext) -> Dict[str, str]:
        """Generate complete WordPress theme"""
        files = {}
        config = context.config.options
        
        # Generate theme files
        files["style.css"] = self._generate_style_css(context)
        files["index.php"] = self._generate_index_template(context)
        files["functions.php"] = self._generate_functions_php(context)
        
        # Generate templates
        template_files = await self._generate_templates(context)
        files.update(template_files)
        
        # Generate template parts
        part_files = await self._generate_template_parts(context)
        files.update(part_files)
        
        # Generate block patterns if enabled
        if config.include_blocks:
            pattern_files = self._generate_block_patterns(context)
            files.update(pattern_files)
        
        # Generate custom post types and fields
        if self._needs_custom_post_types(context):
            cpt_files = self._generate_custom_post_types(context)
            files.update(cpt_files)
        
        # Generate customizer settings
        files["inc/customizer.php"] = self._generate_customizer(context)
        
        # Generate theme setup
        files["inc/theme-setup.php"] = self._generate_theme_setup(context)
        
        # Generate security functions
        files["inc/security.php"] = self._generate_security_functions()
        
        # Generate accessibility features
        files["inc/accessibility.php"] = self._generate_accessibility_features()
        
        # Generate JavaScript files
        js_files = self._generate_javascript_files(context)
        files.update(js_files)
        
        # Generate SCSS files if enabled
        if config.use_sass:
            scss_files = self._generate_scss_files(context)
            files.update(scss_files)
        
        # Generate screenshot
        files["screenshot.png"] = "# Screenshot placeholder - replace with actual 1200x900 theme screenshot"
        
        # Generate README
        files["README.md"] = self._generate_readme(context)
        
        return files
    
    def _generate_style_css(self, context: ExportContext) -> str:
        """Generate theme style.css with proper header"""
        return f"""/*
Theme Name: {context.project.name}
Description: {context.project.description or 'Custom WordPress theme generated by Canvas Editor'}
Author: Canvas Editor
Version: 1.0.0
Requires at least: 6.0
Tested up to: 6.4
Requires PHP: 8.0
License: GPL v2 or later
License URI: https://www.gnu.org/licenses/gpl-2.0.html
Text Domain: {self._get_text_domain(context)}
Domain Path: /languages
*/

/* Reset and base styles */
*, *::before, *::after {{
    box-sizing: border-box;
}}

body {{
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #fff;
}}

/* Accessibility */
.screen-reader-text {{
    border: 0;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute !important;
    width: 1px;
    word-wrap: normal !important;
}}

.screen-reader-text:focus {{
    background-color: #f1f1f1;
    border-radius: 3px;
    box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
    clip: auto !important;
    clip-path: none;
    color: #21759b;
    display: block;
    font-size: 0.875rem;
    font-weight: 700;
    height: auto;
    left: 5px;
    line-height: normal;
    padding: 15px 23px 14px;
    text-decoration: none;
    top: 5px;
    width: auto;
    z-index: 100000;
}}

/* Container */
.container {{
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}}

/* Header */
.site-header {{
    background: #fff;
    border-bottom: 1px solid #e1e1e1;
    padding: 1rem 0;
}}

.site-branding {{
    display: flex;
    align-items: center;
    justify-content: space-between;
}}

.site-title {{
    margin: 0;
    font-size: 2rem;
    font-weight: 700;
}}

.site-title a {{
    text-decoration: none;
    color: #333;
}}

/* Navigation */
.main-navigation {{
    display: flex;
    align-items: center;
}}

.main-navigation ul {{
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
}}

.main-navigation li {{
    margin-left: 2rem;
}}

.main-navigation a {{
    text-decoration: none;
    color: #333;
    font-weight: 500;
    transition: color 0.3s ease;
}}

.main-navigation a:hover,
.main-navigation a:focus {{
    color: #0073aa;
}}

/* Content */
.site-content {{
    min-height: 50vh;
    padding: 2rem 0;
}}

.content-area {{
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
}}

@media (min-width: 768px) {{
    .content-area {{
        grid-template-columns: 2fr 1fr;
    }}
}}

/* Posts */
.post {{
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid #e1e1e1;
}}

.entry-header {{
    margin-bottom: 1.5rem;
}}

.entry-title {{
    margin: 0 0 0.5rem;
    font-size: 2.5rem;
    line-height: 1.2;
}}

.entry-title a {{
    text-decoration: none;
    color: #333;
}}

.entry-meta {{
    color: #666;
    font-size: 0.9rem;
}}

.entry-content {{
    margin-bottom: 1.5rem;
}}

.entry-content p {{
    margin-bottom: 1rem;
}}

/* Sidebar */
.sidebar {{
    padding: 0 1rem;
}}

.widget {{
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: #f9f9f9;
    border-radius: 5px;
}}

.widget-title {{
    margin: 0 0 1rem;
    font-size: 1.2rem;
    font-weight: 600;
}}

/* Footer */
.site-footer {{
    background: #333;
    color: #fff;
    padding: 2rem 0;
    text-align: center;
}}

/* Responsive */
@media (max-width: 768px) {{
    .site-branding {{
        flex-direction: column;
        gap: 1rem;
    }}
    
    .main-navigation ul {{
        flex-direction: column;
        gap: 1rem;
    }}
    
    .main-navigation li {{
        margin-left: 0;
    }}
}}

/* WordPress Core Classes */
.alignleft {{
    float: left;
    margin-right: 1rem;
    margin-bottom: 1rem;
}}

.alignright {{
    float: right;
    margin-left: 1rem;
    margin-bottom: 1rem;
}}

.aligncenter {{
    display: block;
    margin: 0 auto 1rem;
}}

.wp-caption {{
    max-width: 100%;
}}

.wp-caption-text {{
    font-style: italic;
    text-align: center;
    margin-top: 0.5rem;
}}

/* Generated component styles */
{self._generate_component_styles(context)}
"""
    
    def _generate_index_template(self, context: ExportContext) -> str:
        """Generate index.php template"""
        return f"""<?php
/**
 * The main template file
 *
 * @package {self._get_text_domain(context)}
 */

get_header(); ?>

<main id="primary" class="site-main">
    <div class="container">
        <div class="content-area">
            <div class="main-content">
                <?php if ( have_posts() ) : ?>
                    
                    <?php while ( have_posts() ) : ?>
                        <?php the_post(); ?>
                        <?php get_template_part( 'template-parts/content', get_post_type() ); ?>
                    <?php endwhile; ?>

                    <?php the_posts_navigation(); ?>

                <?php else : ?>

                    <?php get_template_part( 'template-parts/content', 'none' ); ?>

                <?php endif; ?>
            </div>

            <?php get_sidebar(); ?>
        </div>
    </div>
</main>

<?php
get_footer();
"""
    
    def _generate_functions_php(self, context: ExportContext) -> str:
        """Generate functions.php with theme setup"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * Theme functions and definitions
 *
 * @package {text_domain}
 */

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {{
    exit;
}}

// Theme constants
define( '{text_domain.upper()}_VERSION', '1.0.0' );
define( '{text_domain.upper()}_THEME_DIR', get_template_directory() );
define( '{text_domain.upper()}_THEME_URL', get_template_directory_uri() );

// Include theme files
require_once {text_domain.upper()}_THEME_DIR . '/inc/theme-setup.php';
require_once {text_domain.upper()}_THEME_DIR . '/inc/customizer.php';
require_once {text_domain.upper()}_THEME_DIR . '/inc/security.php';
require_once {text_domain.upper()}_THEME_DIR . '/inc/accessibility.php';

// Custom post types and fields
{self._get_custom_post_types_includes(context)}

/**
 * Theme setup
 */
function {text_domain}_setup() {{
    // Make theme available for translation
    load_theme_textdomain( '{text_domain}', get_template_directory() . '/languages' );

    // Add default posts and comments RSS feed links
    add_theme_support( 'automatic-feed-links' );

    // Enable support for Post Thumbnails
    add_theme_support( 'post-thumbnails' );

    // Enable support for document title tag
    add_theme_support( 'title-tag' );

    // Enable support for custom logo
    add_theme_support( 'custom-logo', array(
        'height'      => 100,
        'width'       => 400,
        'flex-width'  => true,
        'flex-height' => true,
    ) );

    // Enable support for HTML5 markup
    add_theme_support( 'html5', array(
        'search-form',
        'comment-form',
        'comment-list',
        'gallery',
        'caption',
        'style',
        'script',
    ) );

    // Enable support for custom header
    add_theme_support( 'custom-header', array(
        'default-image'      => '',
        'default-text-color' => '000000',
        'width'              => 1920,
        'height'             => 400,
        'flex-width'         => true,
        'flex-height'        => true,
    ) );

    // Enable support for custom background
    add_theme_support( 'custom-background', array(
        'default-color' => 'ffffff',
    ) );

    // Enable support for selective refresh for widgets
    add_theme_support( 'customize-selective-refresh-widgets' );

    // Enable block editor styles
    add_theme_support( 'wp-block-styles' );
    add_theme_support( 'align-wide' );
    add_theme_support( 'responsive-embeds' );

    // Register navigation menus
    register_nav_menus( array(
        'primary' => esc_html__( 'Primary Menu', '{text_domain}' ),
        'footer'  => esc_html__( 'Footer Menu', '{text_domain}' ),
    ) );

    // Add support for editor color palette
    add_theme_support( 'editor-color-palette', array(
        array(
            'name'  => esc_html__( 'Primary', '{text_domain}' ),
            'slug'  => 'primary',
            'color' => '#0073aa',
        ),
        array(
            'name'  => esc_html__( 'Secondary', '{text_domain}' ),
            'slug'  => 'secondary',
            'color' => '#333333',
        ),
        array(
            'name'  => esc_html__( 'Accent', '{text_domain}' ),
            'slug'  => 'accent',
            'color' => '#ff6b35',
        ),
    ) );
}}
add_action( 'after_setup_theme', '{text_domain}_setup' );

/**
 * Set the content width in pixels
 */
function {text_domain}_content_width() {{
    $GLOBALS['content_width'] = apply_filters( '{text_domain}_content_width', 1200 );
}}
add_action( 'after_setup_theme', '{text_domain}_content_width', 0 );

/**
 * Register widget area
 */
function {text_domain}_widgets_init() {{
    register_sidebar( array(
        'name'          => esc_html__( 'Primary Sidebar', '{text_domain}' ),
        'id'            => 'sidebar-1',
        'description'   => esc_html__( 'Add widgets here.', '{text_domain}' ),
        'before_widget' => '<div id="%1$s" class="widget %2$s">',
        'after_widget'  => '</div>',
        'before_title'  => '<h3 class="widget-title">',
        'after_title'   => '</h3>',
    ) );

    register_sidebar( array(
        'name'          => esc_html__( 'Footer Widgets', '{text_domain}' ),
        'id'            => 'footer-widgets',
        'description'   => esc_html__( 'Add footer widgets here.', '{text_domain}' ),
        'before_widget' => '<div id="%1$s" class="footer-widget %2$s">',
        'after_widget'  => '</div>',
        'before_title'  => '<h4 class="footer-widget-title">',
        'after_title'   => '</h4>',
    ) );
}}
add_action( 'widgets_init', '{text_domain}_widgets_init' );

/**
 * Enqueue scripts and styles
 */
function {text_domain}_scripts() {{
    // Theme stylesheet
    wp_enqueue_style( '{text_domain}-style', get_stylesheet_uri(), array(), {text_domain.upper()}_VERSION );

    // Theme JavaScript
    wp_enqueue_script( '{text_domain}-script', {text_domain.upper()}_THEME_URL . '/js/theme.js', array( 'jquery' ), {text_domain.upper()}_VERSION, true );

    // Navigation script for mobile
    wp_enqueue_script( '{text_domain}-navigation', {text_domain.upper()}_THEME_URL . '/js/navigation.js', array(), {text_domain.upper()}_VERSION, true );

    // Comment reply script
    if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {{
        wp_enqueue_script( 'comment-reply' );
    }}

    // Localize script for AJAX
    wp_localize_script( '{text_domain}-script', '{text_domain}_ajax', array(
        'ajax_url' => admin_url( 'admin-ajax.php' ),
        'nonce'    => wp_create_nonce( '{text_domain}_nonce' ),
    ) );
}}
add_action( 'wp_enqueue_scripts', '{text_domain}_scripts' );

/**
 * Enqueue block editor assets
 */
function {text_domain}_block_editor_assets() {{
    wp_enqueue_style(
        '{text_domain}-block-editor',
        {text_domain.upper()}_THEME_URL . '/css/block-editor.css',
        array(),
        {text_domain.upper()}_VERSION
    );
}}
add_action( 'enqueue_block_editor_assets', '{text_domain}_block_editor_assets' );

/**
 * Custom template tags and utility functions
 */

/**
 * Display navigation to next/previous set of posts
 */
function {text_domain}_posts_navigation() {{
    the_posts_navigation( array(
        'prev_text' => esc_html__( 'Older posts', '{text_domain}' ),
        'next_text' => esc_html__( 'Newer posts', '{text_domain}' ),
    ) );
}}

/**
 * Display navigation to next/previous post
 */
function {text_domain}_post_navigation() {{
    the_post_navigation( array(
        'prev_text' => '<span class="nav-subtitle">' . esc_html__( 'Previous:', '{text_domain}' ) . '</span> <span class="nav-title">%title</span>',
        'next_text' => '<span class="nav-subtitle">' . esc_html__( 'Next:', '{text_domain}' ) . '</span> <span class="nav-title">%title</span>',
    ) );
}}

/**
 * Display post meta information
 */
function {text_domain}_posted_on() {{
    $time_string = '<time class="entry-date published updated" datetime="%1$s">%2$s</time>';
    if ( get_the_time( 'U' ) !== get_the_modified_time( 'U' ) ) {{
        $time_string = '<time class="entry-date published" datetime="%1$s">%2$s</time><time class="updated" datetime="%3$s">%4$s</time>';
    }}

    $time_string = sprintf( $time_string,
        esc_attr( get_the_date( DATE_W3C ) ),
        esc_html( get_the_date() ),
        esc_attr( get_the_modified_date( DATE_W3C ) ),
        esc_html( get_the_modified_date() )
    );

    $posted_on = sprintf(
        /* translators: %s: post date. */
        esc_html_x( 'Posted on %s', 'post date', '{text_domain}' ),
        '<a href="' . esc_url( get_permalink() ) . '" rel="bookmark">' . $time_string . '</a>'
    );

    $byline = sprintf(
        /* translators: %s: post author. */
        esc_html_x( 'by %s', 'post author', '{text_domain}' ),
        '<span class="author vcard"><a class="url fn n" href="' . esc_url( get_author_posts_url( get_the_author_meta( 'ID' ) ) ) . '">' . esc_html( get_the_author() ) . '</a></span>'
    );

    echo '<span class="posted-on">' . $posted_on . '</span><span class="byline"> ' . $byline . '</span>';
}}

/**
 * Security enhancements
 */

// Remove WordPress version from head
remove_action( 'wp_head', 'wp_generator' );

// Disable XML-RPC
add_filter( 'xmlrpc_enabled', '__return_false' );

// Remove unnecessary header information
remove_action( 'wp_head', 'wp_shortlink_wp_head' );
remove_action( 'wp_head', 'rsd_link' );
remove_action( 'wp_head', 'wlwmanifest_link' );

/**
 * Performance optimizations
 */

// Remove emoji scripts
remove_action( 'wp_head', 'print_emoji_detection_script', 7 );
remove_action( 'wp_print_styles', 'print_emoji_styles' );

// Defer non-critical JavaScript
function {text_domain}_defer_scripts( $tag, $handle, $src ) {{
    $defer_scripts = array( '{text_domain}-script' );
    
    if ( in_array( $handle, $defer_scripts, true ) ) {{
        return str_replace( ' src', ' defer src', $tag );
    }}
    
    return $tag;
}}
add_filter( 'script_loader_tag', '{text_domain}_defer_scripts', 10, 3 );
"""
    
    async def _generate_templates(self, context: ExportContext) -> Dict[str, str]:
        """Generate WordPress template files"""
        files = {}
        
        # Header template
        files["header.php"] = self._generate_header_template(context)
        
        # Footer template
        files["footer.php"] = self._generate_footer_template(context)
        
        # Single post template
        files["single.php"] = self._generate_single_template(context)
        
        # Page template
        files["page.php"] = self._generate_page_template(context)
        
        # Archive template
        files["archive.php"] = self._generate_archive_template(context)
        
        # Search results template
        files["search.php"] = self._generate_search_template(context)
        
        # 404 template
        files["404.php"] = self._generate_404_template(context)
        
        # Sidebar template
        files["sidebar.php"] = self._generate_sidebar_template(context)
        
        return files
    
    def _generate_header_template(self, context: ExportContext) -> str:
        """Generate header.php template"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * The header for our theme
 *
 * @package {text_domain}
 */

?>
<!doctype html>
<html <?php language_attributes(); ?>>
<head>
    <meta charset="<?php bloginfo( 'charset' ); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="profile" href="https://gmpg.org/xfn/11">

    <?php wp_head(); ?>
</head>

<body <?php body_class(); ?>>
<?php wp_body_open(); ?>

<div id="page" class="site">
    <a class="skip-link screen-reader-text" href="#primary"><?php esc_html_e( 'Skip to content', '{text_domain}' ); ?></a>

    <header id="masthead" class="site-header">
        <div class="container">
            <div class="site-branding">
                <?php
                if ( has_custom_logo() ) :
                    the_custom_logo();
                else :
                ?>
                    <h1 class="site-title">
                        <a href="<?php echo esc_url( home_url( '/' ) ); ?>" rel="home">
                            <?php bloginfo( 'name' ); ?>
                        </a>
                    </h1>
                    
                    <?php
                    $description = get_bloginfo( 'description', 'display' );
                    if ( $description || is_customize_preview() ) :
                    ?>
                        <p class="site-description"><?php echo $description; ?></p>
                    <?php endif; ?>
                <?php endif; ?>

                <nav id="site-navigation" class="main-navigation" aria-label="<?php esc_attr_e( 'Primary Menu', '{text_domain}' ); ?>">
                    <button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
                        <span class="screen-reader-text"><?php esc_html_e( 'Menu', '{text_domain}' ); ?></span>
                        <span class="menu-icon"></span>
                    </button>
                    
                    <?php
                    wp_nav_menu( array(
                        'theme_location' => 'primary',
                        'menu_id'        => 'primary-menu',
                        'menu_class'     => 'primary-menu',
                        'container'      => false,
                        'fallback_cb'    => false,
                    ) );
                    ?>
                </nav>
            </div>
        </div>
    </header>

    <div id="content" class="site-content">
"""
    
    def _generate_footer_template(self, context: ExportContext) -> str:
        """Generate footer.php template"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * The template for displaying the footer
 *
 * @package {text_domain}
 */

?>

    </div><!-- #content -->

    <footer id="colophon" class="site-footer">
        <div class="container">
            <?php if ( is_active_sidebar( 'footer-widgets' ) ) : ?>
                <div class="footer-widgets">
                    <?php dynamic_sidebar( 'footer-widgets' ); ?>
                </div>
            <?php endif; ?>

            <div class="site-info">
                <p>
                    <?php
                    /* translators: 1: Theme name, 2: WordPress. */
                    printf( esc_html__( 'Proudly powered by %1$s and %2$s.', '{text_domain}' ), 
                        '<a href="' . esc_url( 'https://wordpress.org/' ) . '">' . esc_html__( 'WordPress', '{text_domain}' ) . '</a>',
                        '<strong>' . esc_html( get_bloginfo( 'name' ) ) . '</strong>'
                    );
                    ?>
                </p>

                <?php
                if ( has_nav_menu( 'footer' ) ) :
                    wp_nav_menu( array(
                        'theme_location' => 'footer',
                        'menu_class'     => 'footer-menu',
                        'container'      => false,
                        'depth'          => 1,
                    ) );
                endif;
                ?>
            </div>
        </div>
    </footer>
</div><!-- #page -->

<?php wp_footer(); ?>

</body>
</html>
"""
    
    def _generate_single_template(self, context: ExportContext) -> str:
        """Generate single.php template"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * The template for displaying all single posts
 *
 * @package {text_domain}
 */

get_header();
?>

<main id="primary" class="site-main">
    <div class="container">
        <div class="content-area">
            <div class="main-content">
                <?php
                while ( have_posts() ) :
                    the_post();
                    ?>

                    <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
                        <header class="entry-header">
                            <?php the_title( '<h1 class="entry-title">', '</h1>' ); ?>

                            <div class="entry-meta">
                                <?php {text_domain}_posted_on(); ?>
                            </div>
                        </header>

                        <?php if ( has_post_thumbnail() ) : ?>
                            <div class="post-thumbnail">
                                <?php the_post_thumbnail( 'large' ); ?>
                            </div>
                        <?php endif; ?>

                        <div class="entry-content">
                            <?php
                            the_content();

                            wp_link_pages( array(
                                'before' => '<div class="page-links">' . esc_html__( 'Pages:', '{text_domain}' ),
                                'after'  => '</div>',
                            ) );
                            ?>
                        </div>

                        <footer class="entry-footer">
                            <?php
                            $categories_list = get_the_category_list( esc_html__( ', ', '{text_domain}' ) );
                            if ( $categories_list ) :
                                /* translators: 1: list of categories. */
                                printf( '<span class="cat-links">' . esc_html__( 'Posted in %1$s', '{text_domain}' ) . '</span>', $categories_list );
                            endif;

                            $tags_list = get_the_tag_list( '', esc_html_x( ', ', 'list item separator', '{text_domain}' ) );
                            if ( $tags_list ) :
                                /* translators: 1: list of tags. */
                                printf( '<span class="tags-links">' . esc_html__( 'Tagged %1$s', '{text_domain}' ) . '</span>', $tags_list );
                            endif;
                            ?>
                        </footer>
                    </article>

                    <?php {text_domain}_post_navigation(); ?>

                    <?php
                    // If comments are open or we have at least one comment, load up the comment template.
                    if ( comments_open() || get_comments_number() ) :
                        comments_template();
                    endif;

                endwhile;
                ?>
            </div>

            <?php get_sidebar(); ?>
        </div>
    </div>
</main>

<?php
get_footer();
"""
    
    def _generate_page_template(self, context: ExportContext) -> str:
        """Generate page.php template"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * The template for displaying all pages
 *
 * @package {text_domain}
 */

get_header();
?>

<main id="primary" class="site-main">
    <div class="container">
        <div class="content-area">
            <div class="main-content">
                <?php
                while ( have_posts() ) :
                    the_post();
                    ?>

                    <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
                        <header class="entry-header">
                            <?php the_title( '<h1 class="entry-title">', '</h1>' ); ?>
                        </header>

                        <?php if ( has_post_thumbnail() ) : ?>
                            <div class="post-thumbnail">
                                <?php the_post_thumbnail( 'large' ); ?>
                            </div>
                        <?php endif; ?>

                        <div class="entry-content">
                            <?php
                            the_content();

                            wp_link_pages( array(
                                'before' => '<div class="page-links">' . esc_html__( 'Pages:', '{text_domain}' ),
                                'after'  => '</div>',
                            ) );
                            ?>
                        </div>
                    </article>

                    <?php
                    // If comments are open or we have at least one comment, load up the comment template.
                    if ( comments_open() || get_comments_number() ) :
                        comments_template();
                    endif;

                endwhile;
                ?>
            </div>

            <?php get_sidebar(); ?>
        </div>
    </div>
</main>

<?php
get_footer();
"""
    
    async def _generate_template_parts(self, context: ExportContext) -> Dict[str, str]:
        """Generate template parts"""
        files = {}
        text_domain = self._get_text_domain(context)
        
        # Content template part
        files["template-parts/content.php"] = f"""<?php
/**
 * Template part for displaying posts
 *
 * @package {text_domain}
 */

?>

<article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
    <header class="entry-header">
        <?php
        if ( is_singular() ) :
            the_title( '<h1 class="entry-title">', '</h1>' );
        else :
            the_title( '<h2 class="entry-title"><a href="' . esc_url( get_permalink() ) . '" rel="bookmark">', '</a></h2>' );
        endif;

        if ( 'post' === get_post_type() ) :
            ?>
            <div class="entry-meta">
                <?php {text_domain}_posted_on(); ?>
            </div>
            <?php
        endif;
        ?>
    </header>

    <?php if ( has_post_thumbnail() && ! is_singular() ) : ?>
        <div class="post-thumbnail">
            <a href="<?php the_permalink(); ?>">
                <?php the_post_thumbnail( 'medium' ); ?>
            </a>
        </div>
    <?php endif; ?>

    <div class="entry-content">
        <?php
        if ( is_singular() ) :
            the_content();
        else :
            the_excerpt();
        endif;

        wp_link_pages( array(
            'before' => '<div class="page-links">' . esc_html__( 'Pages:', '{text_domain}' ),
            'after'  => '</div>',
        ) );
        ?>
    </div>

    <?php if ( ! is_singular() ) : ?>
        <footer class="entry-footer">
            <a href="<?php the_permalink(); ?>" class="read-more">
                <?php esc_html_e( 'Read More', '{text_domain}' ); ?>
            </a>
        </footer>
    <?php endif; ?>
</article>
"""
        
        # Content none template part
        files["template-parts/content-none.php"] = f"""<?php
/**
 * Template part for displaying a message that posts cannot be found
 *
 * @package {text_domain}
 */

?>

<section class="no-results not-found">
    <header class="page-header">
        <h1 class="page-title"><?php esc_html_e( 'Nothing here', '{text_domain}' ); ?></h1>
    </header>

    <div class="page-content">
        <?php
        if ( is_home() && current_user_can( 'publish_posts' ) ) :

            printf(
                '<p>' . wp_kses(
                    /* translators: 1: link to WP admin new post page. */
                    __( 'Ready to publish your first post? <a href="%1$s">Get started here</a>.', '{text_domain}' ),
                    array(
                        'a' => array(
                            'href' => array(),
                        ),
                    )
                ) . '</p>',
                esc_url( admin_url( 'post-new.php' ) )
            );

        elseif ( is_search() ) :
            ?>

            <p><?php esc_html_e( 'Sorry, but nothing matched your search terms. Please try again with some different keywords.', '{text_domain}' ); ?></p>
            <?php
            get_search_form();

        else :
            ?>

            <p><?php esc_html_e( 'It seems we can&rsquo;t find what you&rsquo;re looking for. Perhaps searching can help.', '{text_domain}' ); ?></p>
            <?php
            get_search_form();

        endif;
        ?>
    </div>
</section>
"""
        
        return files
    
    def _generate_customizer(self, context: ExportContext) -> str:
        """Generate customizer.php"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * Theme Customizer
 *
 * @package {text_domain}
 */

/**
 * Add postMessage support for site title and description for the Theme Customizer.
 */
function {text_domain}_customize_register( $wp_customize ) {{
    $wp_customize->get_setting( 'blogname' )->transport         = 'postMessage';
    $wp_customize->get_setting( 'blogdescription' )->transport  = 'postMessage';
    $wp_customize->get_setting( 'header_textcolor' )->transport = 'postMessage';

    if ( isset( $wp_customize->selective_refresh ) ) {{
        $wp_customize->selective_refresh->add_partial( 'blogname', array(
            'selector'        => '.site-title a',
            'render_callback' => '{text_domain}_customize_partial_blogname',
        ) );
        $wp_customize->selective_refresh->add_partial( 'blogdescription', array(
            'selector'        => '.site-description',
            'render_callback' => '{text_domain}_customize_partial_blogdescription',
        ) );
    }}

    // Add theme options section
    $wp_customize->add_section( '{text_domain}_options', array(
        'title'    => esc_html__( 'Theme Options', '{text_domain}' ),
        'priority' => 130,
    ) );

    // Header layout setting
    $wp_customize->add_setting( '{text_domain}_header_layout', array(
        'default'           => 'default',
        'sanitize_callback' => '{text_domain}_sanitize_select',
    ) );

    $wp_customize->add_control( '{text_domain}_header_layout', array(
        'label'    => esc_html__( 'Header Layout', '{text_domain}' ),
        'section'  => '{text_domain}_options',
        'type'     => 'select',
        'choices'  => array(
            'default' => esc_html__( 'Default', '{text_domain}' ),
            'centered' => esc_html__( 'Centered', '{text_domain}' ),
        ),
    ) );

    // Footer text setting
    $wp_customize->add_setting( '{text_domain}_footer_text', array(
        'default'           => '',
        'sanitize_callback' => 'sanitize_text_field',
    ) );

    $wp_customize->add_control( '{text_domain}_footer_text', array(
        'label'       => esc_html__( 'Footer Text', '{text_domain}' ),
        'section'     => '{text_domain}_options',
        'type'        => 'text',
        'description' => esc_html__( 'Custom text for the footer area.', '{text_domain}' ),
    ) );
}}
add_action( 'customize_register', '{text_domain}_customize_register' );

/**
 * Render the site title for the selective refresh partial.
 */
function {text_domain}_customize_partial_blogname() {{
    bloginfo( 'name' );
}}

/**
 * Render the site tagline for the selective refresh partial.
 */
function {text_domain}_customize_partial_blogdescription() {{
    bloginfo( 'description' );
}}

/**
 * Sanitize select field
 */
function {text_domain}_sanitize_select( $input, $setting ) {{
    $choices = $setting->manager->get_control( $setting->id )->choices;
    return ( array_key_exists( $input, $choices ) ? $input : $setting->default );
}}

/**
 * Binds JS handlers to make Theme Customizer preview reload changes asynchronously.
 */
function {text_domain}_customize_preview_js() {{
    wp_enqueue_script( '{text_domain}-customizer', get_template_directory_uri() . '/js/customizer.js', array( 'customize-preview' ), '1.0.0', true );
}}
add_action( 'customize_preview_init', '{text_domain}_customize_preview_js' );
"""
    
    def _generate_security_functions(self) -> str:
        """Generate security.php"""
        return """<?php
/**
 * Security functions
 *
 * @package canvas_theme
 */

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Remove WordPress version from RSS feeds
 */
function canvas_theme_remove_version_rss() {
    return '';
}
add_filter( 'the_generator', 'canvas_theme_remove_version_rss' );

/**
 * Hide WordPress version from scripts and styles
 */
function canvas_theme_remove_version_scripts_styles( $src ) {
    if ( strpos( $src, 'ver=' . get_bloginfo( 'version' ) ) ) {
        $src = remove_query_arg( 'ver', $src );
    }
    return $src;
}
add_filter( 'style_loader_src', 'canvas_theme_remove_version_scripts_styles', 9999 );
add_filter( 'script_loader_src', 'canvas_theme_remove_version_scripts_styles', 9999 );

/**
 * Disable file editing in WordPress admin
 */
if ( ! defined( 'DISALLOW_FILE_EDIT' ) ) {
    define( 'DISALLOW_FILE_EDIT', true );
}

/**
 * Add security headers
 */
function canvas_theme_security_headers() {
    if ( ! is_admin() ) {
        header( 'X-Content-Type-Options: nosniff' );
        header( 'X-Frame-Options: SAMEORIGIN' );
        header( 'X-XSS-Protection: 1; mode=block' );
        header( 'Referrer-Policy: strict-origin-when-cross-origin' );
    }
}
add_action( 'send_headers', 'canvas_theme_security_headers' );

/**
 * Limit login attempts (basic implementation)
 */
function canvas_theme_limit_login_attempts() {
    $max_attempts = 5;
    $lockout_duration = 15 * MINUTE_IN_SECONDS;
    
    $ip = $_SERVER['REMOTE_ADDR'];
    $attempts_key = 'login_attempts_' . md5( $ip );
    $attempts = get_transient( $attempts_key );
    
    if ( $attempts >= $max_attempts ) {
        wp_die( 
            esc_html__( 'Too many failed login attempts. Please try again later.', 'canvas_theme' ),
            esc_html__( 'Login Blocked', 'canvas_theme' ),
            array( 'response' => 423 )
        );
    }
}
add_action( 'wp_login_failed', 'canvas_theme_record_failed_login' );

function canvas_theme_record_failed_login() {
    $ip = $_SERVER['REMOTE_ADDR'];
    $attempts_key = 'login_attempts_' . md5( $ip );
    $attempts = get_transient( $attempts_key );
    $attempts = $attempts ? $attempts + 1 : 1;
    
    set_transient( $attempts_key, $attempts, 15 * MINUTE_IN_SECONDS );
}

/**
 * Clear failed attempts on successful login
 */
function canvas_theme_clear_login_attempts() {
    $ip = $_SERVER['REMOTE_ADDR'];
    $attempts_key = 'login_attempts_' . md5( $ip );
    delete_transient( $attempts_key );
}
add_action( 'wp_login', 'canvas_theme_clear_login_attempts' );

/**
 * Sanitize file uploads
 */
function canvas_theme_sanitize_file_uploads( $file ) {
    $filename = $file['name'];
    $filetype = wp_check_filetype( $filename );
    
    // Allowed file types
    $allowed_types = array( 'jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx' );
    
    if ( ! in_array( $filetype['ext'], $allowed_types, true ) ) {
        $file['error'] = esc_html__( 'File type not allowed.', 'canvas_theme' );
    }
    
    return $file;
}
add_filter( 'wp_handle_upload_prefilter', 'canvas_theme_sanitize_file_uploads' );
"""
    
    def _generate_accessibility_features(self) -> str:
        """Generate accessibility.php"""
        return """<?php
/**
 * Accessibility features
 *
 * @package canvas_theme
 */

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Add skip links for keyboard navigation
 */
function canvas_theme_skip_links() {
    ?>
    <a class="skip-link screen-reader-text" href="#primary"><?php esc_html_e( 'Skip to main content', 'canvas_theme' ); ?></a>
    <a class="skip-link screen-reader-text" href="#site-navigation"><?php esc_html_e( 'Skip to navigation', 'canvas_theme' ); ?></a>
    <?php
}
add_action( 'wp_body_open', 'canvas_theme_skip_links', 5 );

/**
 * Add focus management for mobile menu
 */
function canvas_theme_menu_focus_script() {
    ?>
    <script>
    (function() {
        var container = document.getElementById('site-navigation');
        if (!container) return;
        
        var button = container.getElementsByTagName('button')[0];
        if (!button) return;
        
        var menu = container.getElementsByTagName('ul')[0];
        if (!menu) return;
        
        // Set menu items variables
        var links = menu.getElementsByTagName('a');
        var subMenus = menu.getElementsByClassName('sub-menu');
        
        // Set focus on first menu item when menu is opened
        button.onclick = function() {
            if (menu.classList.contains('toggled')) {
                menu.classList.remove('toggled');
                button.setAttribute('aria-expanded', 'false');
            } else {
                menu.classList.add('toggled');
                button.setAttribute('aria-expanded', 'true');
                if (links.length > 0) {
                    links[0].focus();
                }
            }
        };
        
        // Close menu with Escape key
        menu.addEventListener('keydown', function(e) {
            if (e.keyCode === 27) { // Escape key
                menu.classList.remove('toggled');
                button.setAttribute('aria-expanded', 'false');
                button.focus();
            }
        });
    })();
    </script>
    <?php
}
add_action( 'wp_footer', 'canvas_theme_menu_focus_script' );

/**
 * Add proper heading structure
 */
function canvas_theme_check_heading_structure() {
    if ( is_admin() || ! current_user_can( 'edit_posts' ) ) {
        return;
    }
    
    global $post;
    if ( ! $post ) {
        return;
    }
    
    $content = $post->post_content;
    
    // Check for proper heading hierarchy
    $headings = array();
    preg_match_all( '/<h([1-6])[^>]*>/i', $content, $matches );
    
    if ( ! empty( $matches[1] ) ) {
        foreach ( $matches[1] as $level ) {
            $headings[] = (int) $level;
        }
        
        // Check for skipped heading levels
        $prev_level = 0;
        foreach ( $headings as $level ) {
            if ( $prev_level > 0 && $level > $prev_level + 1 ) {
                add_action( 'admin_notices', function() use ( $level, $prev_level ) {
                    echo '<div class="notice notice-warning"><p>';
                    printf( 
                        esc_html__( 'Accessibility warning: Heading level jumps from H%d to H%d. Consider using proper heading hierarchy.', 'canvas_theme' ),
                        $prev_level,
                        $level
                    );
                    echo '</p></div>';
                });
                break;
            }
            $prev_level = $level;
        }
    }
}
add_action( 'admin_init', 'canvas_theme_check_heading_structure' );

/**
 * Improve focus indicators
 */
function canvas_theme_focus_styles() {
    ?>
    <style>
    /* Enhanced focus indicators */
    a:focus,
    button:focus,
    input:focus,
    textarea:focus,
    select:focus {
        outline: 2px solid #005fcc;
        outline-offset: 2px;
    }
    
    /* Skip link styling */
    .skip-link {
        background: #000;
        color: #fff;
        text-decoration: none;
        padding: 8px 16px;
        position: absolute;
        top: -40px;
        left: 6px;
        z-index: 100000;
        transition: top 0.3s;
    }
    
    .skip-link:focus {
        top: 7px;
    }
    </style>
    <?php
}
add_action( 'wp_head', 'canvas_theme_focus_styles' );

/**
 * Add proper ARIA labels to navigation
 */
function canvas_theme_nav_menu_args( $args ) {
    if ( 'primary' === $args['theme_location'] ) {
        $args['container_aria_label'] = esc_attr__( 'Primary Navigation', 'canvas_theme' );
    }
    
    if ( 'footer' === $args['theme_location'] ) {
        $args['container_aria_label'] = esc_attr__( 'Footer Navigation', 'canvas_theme' );
    }
    
    return $args;
}
add_filter( 'wp_nav_menu_args', 'canvas_theme_nav_menu_args' );

/**
 * Add proper alt text to post thumbnails
 */
function canvas_theme_post_thumbnail_alt( $html, $post_id, $post_thumbnail_id ) {
    $alt_text = get_post_meta( $post_thumbnail_id, '_wp_attachment_image_alt', true );
    
    if ( empty( $alt_text ) ) {
        $post_title = get_the_title( $post_id );
        $alt_text = sprintf( esc_attr__( 'Featured image for: %s', 'canvas_theme' ), $post_title );
        $html = str_replace( 'alt=""', 'alt="' . $alt_text . '"', $html );
    }
    
    return $html;
}
add_filter( 'post_thumbnail_html', 'canvas_theme_post_thumbnail_alt', 10, 3 );
"""
    
    def _generate_javascript_files(self, context: ExportContext) -> Dict[str, str]:
        """Generate JavaScript files"""
        files = {}
        
        # Main theme JavaScript
        files["js/theme.js"] = """/**
 * Theme JavaScript
 */

(function($) {
    'use strict';
    
    // Mobile menu toggle
    $('.menu-toggle').on('click', function() {
        $(this).toggleClass('active');
        $('.primary-menu').toggleClass('toggled');
        
        // Update ARIA attributes
        var expanded = $(this).attr('aria-expanded') === 'true' || false;
        $(this).attr('aria-expanded', !expanded);
    });
    
    // Smooth scroll for anchor links
    $('a[href*="#"]:not([href="#"])').on('click', function() {
        if (location.pathname.replace(/^\//, '') === this.pathname.replace(/^\//, '') && 
            location.hostname === this.hostname) {
            var target = $(this.hash);
            target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
            if (target.length) {
                $('html, body').animate({
                    scrollTop: target.offset().top - 100
                }, 1000);
                return false;
            }
        }
    });
    
    // Accessibility: Dropdown menu keyboard navigation
    $('.menu-item-has-children > a').on('keydown', function(e) {
        if (e.which === 13 || e.which === 32) { // Enter or Space
            e.preventDefault();
            $(this).next('.sub-menu').toggle();
        }
    });
    
    // Close dropdowns when clicking outside
    $(document).on('click', function(e) {
        if (!$(e.target).closest('.menu-item-has-children').length) {
            $('.sub-menu').hide();
        }
    });
    
})(jQuery);
"""
        
        # Navigation JavaScript
        files["js/navigation.js"] = """/**
 * Navigation enhancements
 */

(function() {
    'use strict';
    
    var container = document.getElementById('site-navigation');
    if (!container) return;
    
    var button = container.getElementsByTagName('button')[0];
    if (!button) return;
    
    var menu = container.getElementsByTagName('ul')[0];
    if (!menu) return;
    
    button.onclick = function() {
        if (menu.classList.contains('toggled')) {
            menu.classList.remove('toggled');
            button.setAttribute('aria-expanded', 'false');
        } else {
            menu.classList.add('toggled');
            button.setAttribute('aria-expanded', 'true');
        }
    };
    
    // Handle keyboard navigation
    var links = menu.getElementsByTagName('a');
    var subMenus = menu.getElementsByClassName('sub-menu');
    
    for (var i = 0; i < links.length; i++) {
        links[i].addEventListener('focus', toggleFocus, true);
        links[i].addEventListener('blur', toggleFocus, true);
    }
    
    function toggleFocus() {
        var self = this;
        while (-1 === self.className.indexOf('menu-item-has-children')) {
            if ('li' === self.tagName.toLowerCase()) {
                if (-1 !== self.className.indexOf('focus')) {
                    self.className = self.className.replace(' focus', '');
                } else {
                    self.className += ' focus';
                }
            }
            self = self.parentElement;
        }
    }
    
})();
"""
        
        # Customizer JavaScript
        files["js/customizer.js"] = """/**
 * Customizer enhancements for live preview
 */

(function($) {
    'use strict';
    
    // Site title and description
    wp.customize('blogname', function(value) {
        value.bind(function(to) {
            $('.site-title a').text(to);
        });
    });
    
    wp.customize('blogdescription', function(value) {
        value.bind(function(to) {
            $('.site-description').text(to);
        });
    });
    
    // Header text color
    wp.customize('header_textcolor', function(value) {
        value.bind(function(to) {
            if ('blank' === to) {
                $('.site-title, .site-description').css({
                    'clip': 'rect(1px, 1px, 1px, 1px)',
                    'position': 'absolute'
                });
            } else {
                $('.site-title, .site-description').css({
                    'clip': 'auto',
                    'position': 'relative'
                });
                $('.site-title a, .site-description').css({
                    'color': to
                });
            }
        });
    });
    
})(jQuery);
"""
        
        return files
    
    def _generate_readme(self, context: ExportContext) -> str:
        """Generate README.md"""
        text_domain = self._get_text_domain(context)
        
        return f"""# {context.project.name}

A custom WordPress theme generated by Canvas Editor.

## Description

{context.project.description or 'Custom WordPress theme with modern features and accessibility support.'}

## Installation

1. Upload the theme folder to `/wp-content/themes/`
2. Activate the theme through the WordPress admin
3. Customize the theme through Appearance > Customize

## Features

- **Responsive Design**: Mobile-first approach with flexible layouts
- **Accessibility Ready**: WCAG 2.1 AA compliant with proper ARIA labels and keyboard navigation
- **SEO Optimized**: Clean, semantic HTML5 markup
- **Security Enhanced**: Built-in security headers and input sanitization
- **Performance Optimized**: Minified assets and efficient loading
- **Block Editor Support**: Full compatibility with Gutenberg blocks
- **Custom Post Types**: Support for custom content types
- **Translation Ready**: Fully prepared for localization

## Requirements

- WordPress 6.0 or higher
- PHP 8.0 or higher

## Theme Structure

```
{text_domain}/
├── style.css                 # Main stylesheet with theme header
├── index.php                 # Main template file
├── functions.php             # Theme functions and setup
├── header.php                # Header template
├── footer.php                # Footer template
├── sidebar.php               # Sidebar template
├── single.php                # Single post template
├── page.php                  # Page template
├── archive.php               # Archive template
├── search.php                # Search results template
├── 404.php                   # 404 error template
├── inc/                      # Include files
│   ├── theme-setup.php       # Theme setup functions
│   ├── customizer.php        # Customizer settings
│   ├── security.php          # Security functions
│   └── accessibility.php     # Accessibility features
├── template-parts/           # Template parts
│   ├── content.php           # Default content template
│   └── content-none.php      # No content found template
├── js/                       # JavaScript files
│   ├── theme.js              # Main theme JavaScript
│   ├── navigation.js         # Navigation enhancements
│   └── customizer.js         # Customizer preview
└── languages/                # Translation files
```

## Customization

### Customizer Options

The theme includes several customizer options:

- **Header Layout**: Choose between default and centered layouts
- **Footer Text**: Add custom footer text
- **Colors**: Customize theme colors
- **Typography**: Adjust font settings

### Custom Post Types

The theme supports custom post types for enhanced content management.

### Block Patterns

Pre-designed block patterns are included for quick page building.

## Security

This theme includes several security enhancements:

- Input sanitization and validation
- Security headers (X-Frame-Options, X-XSS-Protection, etc.)
- Limited login attempts
- File upload restrictions
- WordPress version hiding

## Accessibility

The theme follows WCAG 2.1 AA guidelines:

- Proper heading hierarchy
- Keyboard navigation support
- Focus indicators
- Screen reader friendly
- Alternative text for images
- Sufficient color contrast

## Browser Support

- Chrome (latest 2 versions)
- Firefox (latest 2 versions)
- Safari (latest 2 versions)
- Edge (latest 2 versions)

## Performance

- Optimized CSS and JavaScript
- Lazy loading support
- Efficient database queries
- Minimal HTTP requests

## License

This theme is licensed under the GPL v2 or later.

## Support

For theme support and documentation, please visit the [theme documentation](https://example.com/docs).

## Changelog

### Version 1.0.0
- Initial release
- Basic theme functionality
- Accessibility features
- Security enhancements

## Credits

- Generated by Canvas Editor
- Font Awesome icons
- Normalize.css for CSS reset
"""
    
    # Helper methods
    def _get_text_domain(self, context: ExportContext) -> str:
        """Get theme text domain"""
        return context.project.name.lower().replace(" ", "_").replace("-", "_")
    
    def _needs_custom_post_types(self, context: ExportContext) -> bool:
        """Check if custom post types are needed"""
        return any(comp.type not in ["text", "image", "link", "button"] for comp in context.project.components)
    
    def _get_custom_post_types_includes(self, context: ExportContext) -> str:
        """Generate custom post type includes"""
        if not self._needs_custom_post_types(context):
            return "// No custom post types needed"
        
        return "require_once " + self._get_text_domain(context).upper() + "_THEME_DIR . '/inc/custom-post-types.php';"
    
    def _generate_custom_post_types(self, context: ExportContext) -> Dict[str, str]:
        """Generate custom post types"""
        files = {}
        
        files["inc/custom-post-types.php"] = """<?php
/**
 * Custom Post Types
 *
 * @package canvas_theme
 */

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Register custom post types
 */
function canvas_theme_register_post_types() {
    // Portfolio post type
    register_post_type( 'portfolio', array(
        'labels' => array(
            'name'          => esc_html__( 'Portfolio', 'canvas_theme' ),
            'singular_name' => esc_html__( 'Portfolio Item', 'canvas_theme' ),
            'add_new_item'  => esc_html__( 'Add New Portfolio Item', 'canvas_theme' ),
            'edit_item'     => esc_html__( 'Edit Portfolio Item', 'canvas_theme' ),
            'new_item'      => esc_html__( 'New Portfolio Item', 'canvas_theme' ),
            'view_item'     => esc_html__( 'View Portfolio Item', 'canvas_theme' ),
            'search_items'  => esc_html__( 'Search Portfolio', 'canvas_theme' ),
        ),
        'public'        => true,
        'has_archive'   => true,
        'rewrite'       => array( 'slug' => 'portfolio' ),
        'supports'      => array( 'title', 'editor', 'thumbnail', 'excerpt' ),
        'menu_icon'     => 'dashicons-portfolio',
        'show_in_rest'  => true,
    ) );
}
add_action( 'init', 'canvas_theme_register_post_types' );

/**
 * Register custom taxonomies
 */
function canvas_theme_register_taxonomies() {
    // Portfolio category
    register_taxonomy( 'portfolio_category', 'portfolio', array(
        'labels' => array(
            'name'          => esc_html__( 'Portfolio Categories', 'canvas_theme' ),
            'singular_name' => esc_html__( 'Portfolio Category', 'canvas_theme' ),
            'add_new_item'  => esc_html__( 'Add New Category', 'canvas_theme' ),
            'edit_item'     => esc_html__( 'Edit Category', 'canvas_theme' ),
        ),
        'hierarchical'  => true,
        'rewrite'       => array( 'slug' => 'portfolio-category' ),
        'show_in_rest'  => true,
    ) );
}
add_action( 'init', 'canvas_theme_register_taxonomies' );
"""
        
        return files
    
    def _generate_block_patterns(self, context: ExportContext) -> Dict[str, str]:
        """Generate block patterns"""
        files = {}
        
        files["inc/block-patterns.php"] = """<?php
/**
 * Block Patterns
 *
 * @package canvas_theme
 */

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Register block patterns
 */
function canvas_theme_register_block_patterns() {
    // Hero section pattern
    register_block_pattern(
        'canvas-theme/hero-section',
        array(
            'title'       => esc_html__( 'Hero Section', 'canvas_theme' ),
            'description' => esc_html__( 'A hero section with title, subtitle, and call-to-action button.', 'canvas_theme' ),
            'content'     => '<!-- wp:cover {"url":"https://via.placeholder.com/1200x600","dimRatio":40} -->
<div class="wp-block-cover"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-40 has-background-dim"></span><img class="wp-block-cover__image-background" alt="" src="https://via.placeholder.com/1200x600" data-object-fit="cover"/><div class="wp-block-cover__inner-container"><!-- wp:heading {"textAlign":"center","level":1,"fontSize":"huge"} -->
<h1 class="has-text-align-center has-huge-font-size">' . esc_html__( 'Welcome to Our Site', 'canvas_theme' ) . '</h1>
<!-- /wp:heading -->

<!-- wp:paragraph {"align":"center","fontSize":"large"} -->
<p class="has-text-align-center has-large-font-size">' . esc_html__( 'We create amazing experiences for our users.', 'canvas_theme' ) . '</p>
<!-- /wp:paragraph -->

<!-- wp:buttons {"layout":{"type":"flex","justifyContent":"center"}} -->
<div class="wp-block-buttons"><!-- wp:button {"backgroundColor":"primary","className":"is-style-fill"} -->
<div class="wp-block-button is-style-fill"><a class="wp-block-button__link has-primary-background-color has-background">' . esc_html__( 'Get Started', 'canvas_theme' ) . '</a></div>
<!-- /wp:button --></div>
<!-- /wp:buttons --></div></div>
<!-- /wp:cover -->',
            'categories'  => array( 'header' ),
        )
    );

    // Feature grid pattern
    register_block_pattern(
        'canvas-theme/feature-grid',
        array(
            'title'       => esc_html__( 'Feature Grid', 'canvas_theme' ),
            'description' => esc_html__( 'A grid of features with icons, titles, and descriptions.', 'canvas_theme' ),
            'content'     => '<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column {"className":"feature-item"} -->
<div class="wp-block-column feature-item"><!-- wp:heading {"textAlign":"center","level":3} -->
<h3 class="has-text-align-center">' . esc_html__( 'Feature One', 'canvas_theme' ) . '</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">' . esc_html__( 'Description of your first feature here.', 'canvas_theme' ) . '</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {"className":"feature-item"} -->
<div class="wp-block-column feature-item"><!-- wp:heading {"textAlign":"center","level":3} -->
<h3 class="has-text-align-center">' . esc_html__( 'Feature Two', 'canvas_theme' ) . '</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">' . esc_html__( 'Description of your second feature here.', 'canvas_theme' ) . '</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {"className":"feature-item"} -->
<div class="wp-block-column feature-item"><!-- wp:heading {"textAlign":"center","level":3} -->
<h3 class="has-text-align-center">' . esc_html__( 'Feature Three', 'canvas_theme' ) . '</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">' . esc_html__( 'Description of your third feature here.', 'canvas_theme' ) . '</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->',
            'categories'  => array( 'columns' ),
        )
    );
}
add_action( 'init', 'canvas_theme_register_block_patterns' );
"""
        
        return files
    
    def _generate_scss_files(self, context: ExportContext) -> Dict[str, str]:
        """Generate SCSS files"""
        files = {}
        
        files["scss/style.scss"] = """// Main SCSS file
@import 'variables';
@import 'mixins';
@import 'base';
@import 'layout';
@import 'components';
@import 'responsive';
"""
        
        files["scss/_variables.scss"] = """// SCSS Variables

// Colors
$primary-color: #0073aa;
$secondary-color: #333333;
$accent-color: #ff6b35;
$text-color: #333333;
$bg-color: #ffffff;
$border-color: #e1e1e1;

// Typography
$font-family-base: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
$font-size-base: 16px;
$line-height-base: 1.6;

// Spacing
$spacing-xs: 0.5rem;
$spacing-sm: 1rem;
$spacing-md: 2rem;
$spacing-lg: 3rem;
$spacing-xl: 4rem;

// Breakpoints
$breakpoint-sm: 576px;
$breakpoint-md: 768px;
$breakpoint-lg: 992px;
$breakpoint-xl: 1200px;

// Container
$container-max-width: 1200px;
"""
        
        files["scss/_mixins.scss"] = """// SCSS Mixins

// Responsive breakpoints
@mixin media-up($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

@mixin media-down($breakpoint) {
  @media (max-width: $breakpoint - 1px) {
    @content;
  }
}

// Clearfix
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Button styles
@mixin button-style($bg: $primary-color, $color: white) {
  background-color: $bg;
  color: $color;
  border: none;
  padding: $spacing-xs $spacing-sm;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:hover,
  &:focus {
    background-color: darken($bg, 10%);
    outline: 2px solid $primary-color;
    outline-offset: 2px;
  }
}

// Accessibility helpers
@mixin screen-reader-text {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute !important;
  width: 1px;
  word-wrap: normal !important;
}
"""
        
        return files
    
    def _generate_component_styles(self, context: ExportContext) -> str:
        """Generate styles for canvas components"""
        styles = []
        
        for component in context.project.components:
            if component.styles:
                class_name = f".component-{component.type}"
                css_rules = []
                
                for prop, value in component.styles.items():
                    css_prop = prop.replace("_", "-")
                    css_rules.append(f"  {css_prop}: {value};")
                
                if css_rules:
                    styles.append(f"{class_name} {{\n{chr(10).join(css_rules)}\n}}")
        
        return "\n\n".join(styles)
    
    def _generate_archive_template(self, context: ExportContext) -> str:
        """Generate archive.php template"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * The template for displaying archive pages
 *
 * @package {text_domain}
 */

get_header();
?>

<main id="primary" class="site-main">
    <div class="container">
        <div class="content-area">
            <div class="main-content">
                <?php if ( have_posts() ) : ?>

                    <header class="page-header">
                        <?php
                        the_archive_title( '<h1 class="page-title">', '</h1>' );
                        the_archive_description( '<div class="archive-description">', '</div>' );
                        ?>
                    </header>

                    <?php while ( have_posts() ) : ?>
                        <?php the_post(); ?>
                        <?php get_template_part( 'template-parts/content', get_post_type() ); ?>
                    <?php endwhile; ?>

                    <?php the_posts_navigation(); ?>

                <?php else : ?>

                    <?php get_template_part( 'template-parts/content', 'none' ); ?>

                <?php endif; ?>
            </div>

            <?php get_sidebar(); ?>
        </div>
    </div>
</main>

<?php
get_footer();
"""
    
    def _generate_search_template(self, context: ExportContext) -> str:
        """Generate search.php template"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * The template for displaying search results pages
 *
 * @package {text_domain}
 */

get_header();
?>

<main id="primary" class="site-main">
    <div class="container">
        <div class="content-area">
            <div class="main-content">
                <?php if ( have_posts() ) : ?>

                    <header class="page-header">
                        <h1 class="page-title">
                            <?php
                            /* translators: %s: search query. */
                            printf( esc_html__( 'Search Results for: %s', '{text_domain}' ), '<span>' . get_search_query() . '</span>' );
                            ?>
                        </h1>
                    </header>

                    <?php while ( have_posts() ) : ?>
                        <?php the_post(); ?>
                        <?php get_template_part( 'template-parts/content', 'search' ); ?>
                    <?php endwhile; ?>

                    <?php the_posts_navigation(); ?>

                <?php else : ?>

                    <?php get_template_part( 'template-parts/content', 'none' ); ?>

                <?php endif; ?>
            </div>

            <?php get_sidebar(); ?>
        </div>
    </div>
</main>

<?php
get_footer();
"""
    
    def _generate_404_template(self, context: ExportContext) -> str:
        """Generate 404.php template"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * The template for displaying 404 pages (not found)
 *
 * @package {text_domain}
 */

get_header();
?>

<main id="primary" class="site-main">
    <div class="container">
        <section class="error-404 not-found">
            <header class="page-header">
                <h1 class="page-title"><?php esc_html_e( 'Oops! That page can&rsquo;t be found.', '{text_domain}' ); ?></h1>
            </header>

            <div class="page-content">
                <p><?php esc_html_e( 'It looks like nothing was found at this location. Maybe try one of the links below or a search?', '{text_domain}' ); ?></p>

                <?php
                get_search_form();

                the_widget( 'WP_Widget_Recent_Posts' );
                ?>

                <div class="widget widget_categories">
                    <h2 class="widget-title"><?php esc_html_e( 'Most Used Categories', '{text_domain}' ); ?></h2>
                    <ul>
                        <?php
                        wp_list_categories( array(
                            'orderby'    => 'count',
                            'order'      => 'DESC',
                            'show_count' => 1,
                            'title_li'   => '',
                            'number'     => 10,
                        ) );
                        ?>
                    </ul>
                </div>

                <?php
                $archive_content = '<p>' . sprintf( esc_html__( 'Try looking in the monthly archives. %1$s', '{text_domain}' ), convert_smilies( ':)' ) ) . '</p>';
                the_widget( 'WP_Widget_Archives', 'dropdown=1', "after_title=</h2>$archive_content" );

                the_widget( 'WP_Widget_Tag_Cloud' );
                ?>
            </div>
        </section>
    </div>
</main>

<?php
get_footer();
"""
    
    def _generate_sidebar_template(self, context: ExportContext) -> str:
        """Generate sidebar.php template"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * The sidebar containing the main widget area
 *
 * @package {text_domain}
 */

if ( ! is_active_sidebar( 'sidebar-1' ) ) {{
    return;
}}
?>

<aside id="secondary" class="widget-area sidebar" role="complementary" aria-label="<?php esc_attr_e( 'Secondary Sidebar', '{text_domain}' ); ?>">
    <?php dynamic_sidebar( 'sidebar-1' ); ?>
</aside>
"""
    
    def _generate_theme_setup(self, context: ExportContext) -> str:
        """Generate theme-setup.php"""
        text_domain = self._get_text_domain(context)
        
        return f"""<?php
/**
 * Theme setup functions
 *
 * @package {text_domain}
 */

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {{
    exit;
}}

/**
 * Add theme support for various features
 */
function {text_domain}_theme_support() {{
    // Add support for responsive embeds
    add_theme_support( 'responsive-embeds' );
    
    // Add support for editor styles
    add_theme_support( 'editor-styles' );
    add_editor_style( 'css/editor-style.css' );
    
    // Add support for dark editor style
    add_theme_support( 'dark-editor-style' );
    
    // Add support for align wide and full
    add_theme_support( 'align-wide' );
    
    // Add support for experimental link color
    add_theme_support( 'experimental-link-color' );
    
    // Add support for experimental cover block spacing
    add_theme_support( 'custom-spacing' );
}}
add_action( 'after_setup_theme', '{text_domain}_theme_support' );

/**
 * Register and enqueue additional styles
 */
function {text_domain}_additional_styles() {{
    // Google Fonts
    wp_enqueue_style( 
        '{text_domain}-google-fonts',
        'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',
        array(),
        null
    );
    
    // Print styles
    wp_enqueue_style(
        '{text_domain}-print',
        get_template_directory_uri() . '/css/print.css',
        array(),
        {text_domain.upper()}_VERSION,
        'print'
    );
}}
add_action( 'wp_enqueue_scripts', '{text_domain}_additional_styles' );

/**
 * Customize excerpt length
 */
function {text_domain}_excerpt_length( $length ) {{
    return 25;
}}
add_filter( 'excerpt_length', '{text_domain}_excerpt_length' );

/**
 * Customize excerpt more text
 */
function {text_domain}_excerpt_more( $more ) {{
    return '&hellip; <a href="' . get_permalink() . '" class="read-more">' . esc_html__( 'Read more', '{text_domain}' ) . '</a>';
}}
add_filter( 'excerpt_more', '{text_domain}_excerpt_more' );

/**
 * Add custom image sizes
 */
function {text_domain}_custom_image_sizes() {{
    add_image_size( 'hero-image', 1920, 800, true );
    add_image_size( 'feature-image', 600, 400, true );
    add_image_size( 'thumbnail-large', 400, 300, true );
}}
add_action( 'after_setup_theme', '{text_domain}_custom_image_sizes' );

/**
 * Enable custom image size selection in media uploader
 */
function {text_domain}_custom_image_size_names( $sizes ) {{
    return array_merge( $sizes, array(
        'hero-image' => esc_html__( 'Hero Image', '{text_domain}' ),
        'feature-image' => esc_html__( 'Feature Image', '{text_domain}' ),
        'thumbnail-large' => esc_html__( 'Large Thumbnail', '{text_domain}' ),
    ) );
}}
add_filter( 'image_size_names_choose', '{text_domain}_custom_image_size_names' );
"""